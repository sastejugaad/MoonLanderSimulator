//Please install following libraries before running this program

#define CAMERA_MODEL_AI_THINKER
#include <WiFi.h>
#include <WiFiUdp.h>
#include <SPI.h>
#include <Wire.h>
#include <MPU6050_tockn.h>

#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include "EloquentVision.h"
#include "ESP32CameraHTTPVideoStreamingServer.h"

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3c ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32


using namespace Eloquent::Vision;
using namespace Eloquent::Vision::Camera;



ESP32Camera camera;
HTTPVideoStreamingServer server(81);

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);


// WiFi network name and password:
//Change this to connect to your wifi router
const char * networkName = "Askey5100-02B0";
const char * networkPswd = "HHLUnKLKQW";

//IP address to send UDP data to:
// either use the ip address of the server or 
// a network broadcast address
const char * udpAddress = "192.168.1.197"; //Ip address of the lander change this to your address
const int udpPort = 6000;

//Are we currently connected?
boolean connected = false;

//The udp library class
WiFiUDP udp;
MPU6050 mpu6050(Wire);
//Draws image on the screen
const unsigned char myBitmap [] PROGMEM = {
  // 'ROCKET FLIGHT Computer (2), 128x64px
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x87, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x7c, 0x7e, 0x3e, 0x64, 0x79, 0xf0, 0x01, 0xf2, 0x08, 0xf8, 0x84, 0xf8, 0x00, 0x00, 
  0x00, 0x00, 0x66, 0x42, 0x60, 0x68, 0x40, 0x40, 0x01, 0x82, 0x09, 0x80, 0x84, 0x20, 0x00, 0x00, 
  0x00, 0x00, 0x66, 0xc3, 0x60, 0x78, 0x40, 0x40, 0x01, 0x82, 0x09, 0x00, 0xfc, 0x20, 0x00, 0x00, 
  0x00, 0x00, 0x7c, 0xc3, 0x60, 0x78, 0x78, 0x40, 0x01, 0xe2, 0x09, 0x18, 0xfc, 0x20, 0x00, 0x00, 
  0x00, 0x00, 0x6c, 0x42, 0x60, 0x68, 0x40, 0x40, 0x01, 0x82, 0x09, 0x88, 0x84, 0x20, 0x00, 0x00, 
  0x00, 0x00, 0x64, 0x66, 0x30, 0x6c, 0x40, 0x40, 0x01, 0x82, 0x09, 0x88, 0x84, 0x20, 0x00, 0x00, 
  0x00, 0x00, 0x66, 0x3c, 0x1e, 0x66, 0x78, 0x40, 0x01, 0x83, 0xc8, 0xf8, 0x84, 0x20, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0f, 0x8f, 0x8c, 0x33, 0xe6, 0x37, 0xef, 0x9f, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0xce, 0x73, 0x36, 0x31, 0x8c, 0x19, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0xce, 0x73, 0x36, 0x31, 0x8c, 0x19, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0xca, 0x53, 0xe6, 0x31, 0x8f, 0x9f, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x18, 0x10, 0xcb, 0xd3, 0x86, 0x21, 0x8c, 0x1b, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x18, 0x19, 0x89, 0x93, 0x02, 0x61, 0x8c, 0x19, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0f, 0x8f, 0x09, 0x93, 0x03, 0xc1, 0x8f, 0x99, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xfe, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x3f, 0xff, 0xe0, 0x00, 0x00, 0x3f, 0xff, 0xe0, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x00, 
  0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x01, 0xff, 0xf0, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0xff, 0x00, 0x00, 0x00, 0x07, 0xff, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x00, 0x00, 
  0x00, 0x80, 0x03, 0xfe, 0x00, 0x04, 0x00, 0x03, 0xfe, 0x00, 0x30, 0x00, 0x7f, 0xc0, 0x01, 0x00, 
  0x01, 0x80, 0x03, 0xfe, 0x00, 0x0c, 0x00, 0x03, 0xfe, 0x00, 0x30, 0x00, 0x7f, 0xc0, 0x01, 0x80, 
  0x01, 0xc0, 0x03, 0xfe, 0x00, 0x0e, 0x00, 0x03, 0xfe, 0x00, 0x78, 0x00, 0x7f, 0xc0, 0x03, 0x80, 
  0x03, 0xc0, 0x03, 0xfe, 0x00, 0x1e, 0x00, 0x03, 0xfe, 0x00, 0x78, 0x00, 0x7f, 0xe0, 0x03, 0xc0, 
  0x07, 0xe0, 0x07, 0x8e, 0x00, 0x3f, 0x00, 0x07, 0x8e, 0x00, 0xfc, 0x00, 0x70, 0xe0, 0x07, 0xe0, 
  0xff, 0xff, 0x06, 0x03, 0x07, 0xff, 0xf8, 0x06, 0x03, 0x1f, 0xff, 0xe0, 0xc0, 0x60, 0xff, 0xff
};

void setup() {
    Wire.begin(14,15); // Change here the i2c pins address
    Serial.begin(115200);
    WiFi.softAP("ESP32", "12345678");// Lander hotspot SSID and password
    camera.begin(FRAMESIZE_QVGA, PIXFORMAT_JPEG);
    server.start();
    if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) 
    {
    Serial.println(F("SSD1306 allocation failed"));
    //for(;;); // Don't proceed, loop forever
    }
    display.clearDisplay();
    display.setTextSize(1);             // Normal 1:1 pixel scale
    display.setTextColor(SSD1306_WHITE);   // Draw white text display.setTextColor(SSD1306_BLACK, SSD1306_WHITE); // Draw 'inverse' text
    display.setCursor(0,0);             // Start at top-left corner
    //display.println(F("Display On"));
    display.drawBitmap(0, 0, myBitmap, 128, 64, WHITE); // display.drawBitmap(x position, y position, bitmap data, bitmap width, bitmap height, color)
    display.display();   
    delay(2000);
    display.clearDisplay(); 
    connectToWiFi(networkName, networkPswd);   
    delay(4000);

      // Try to initialize!
  
  mpu6050.begin();
  mpu6050.calcGyroOffsets(true);


  }

void loop() {  
mpu6050.update();
    
    float yaw = mpu6050.getAngleY();
    float roll = mpu6050.getAngleZ();
    float pitch = mpu6050.getAngleX();
    float temperature = mpu6050.getTemp();
    float AccX = mpu6050.getAccX();
    float AccY = mpu6050.getAccY();
    float AccZ = mpu6050.getAccZ();
    udp.beginPacket(udpAddress,udpPort);
    udp.printf("%f,%f,%f,%f,%f,%f,%f",AccX,AccY,AccZ,temperature,yaw,roll,pitch);// Sends the data over wifi
    const uint8_t* buffer = (uint8_t*)
   //   uint8_t[60] buffer = {};
    udp.endPacket();  
    
}
  void connectToWiFi(const char * ssid, const char * pwd){
  //Connects to the wifi router.
  Serial.println("Connecting to WiFi network: " + String(ssid));
  WiFi.disconnect(true); // delete old config 
  WiFi.onEvent(WiFiEvent);//register event handler
  WiFi.begin(ssid, pwd);//Initiate connection
  Serial.println("Waiting for WIFI connection...");
  disp_text(" Searching for WIFI",1,0,20,1);
}

//wifi event handler
void WiFiEvent(WiFiEvent_t event)
{
    switch(event) 
    {
      case SYSTEM_EVENT_STA_GOT_IP:           
          Serial.print("WiFi connected! IP address: ");//When connected set
          Serial.println(WiFi.localIP());
          disp_text(" WIFI connected",1,0,10,1);
          disp_text(" Sending Data..",1,0,20,0);
          disp_text(" -----------------",1,0,30,0);
          display.setCursor(5,40);
          display.println(WiFi.localIP());
          display.display();
          disp_text("      Saste Jugaad",1,0,50,0);
         
          
          //initializes the UDP state
          //This initializes the transfer buffer
          udp.begin(WiFi.localIP(),udpPort);
          connected = true;
          break;
          
      case SYSTEM_EVENT_STA_DISCONNECTED:
          Serial.println("WiFi lost connection");
          connected = false;
          disp_text("WIFI LOST",2,10,0,1);
          break;
      default: break;
    }
}

void disp_text(String text,int txt_size,int px,int py,int clear_scrn)
{
 //Small function to help display text on the oled screen.
 if(clear_scrn == 1)
 {
 display.clearDisplay();// clear screen
 }
 display.setCursor(px,py);//postion to draw
 display.setTextSize(txt_size);//font size
 display.println(text);//actual text
 display.display();

}
